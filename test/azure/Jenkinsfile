import static java.util.UUID.randomUUID

// BUILD PARAMETERS:
// - clusterName (optional)
// - kubernetesVerison (optional) (default to value of: https://storage.googleapis.com/kubernetes-release/release/latest.txt)
// - tenantId
// - subscriptionId
// - destroyCluster
// - testCluster
// - azureMachinePassword
// - useEphemeralDrive
// CREDENTIALS
// - username/password
//   - id: azure_service_principal

latestReleaseUrl = "https://storage.googleapis.com/kubernetes-release/release/latest.txt"

node {
	wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
		deleteDir()
		checkout scm

		sh 'git rev-parse --short HEAD > commit'
		env.GIT_COMMIT = readFile('commit').trim()
		env.UNIQUE_VERSION = "${env.BUILD_NUMBER}.${env.GIT_COMMIT}"

		if (clusterName == "") {
			clusterName = "k8s-any-${env.BUILD_NUMBER}-${env.GIT_COMMIT}"
		}
		if (azureMachinePassword == "") {
			azureMachinePassword = randomUUID()
		}
		def kanyTag = "${dockerRepo}/k8s-anywhere:${env.UNIQUE_VERSION}"
		def ignitionTag = "${dockerRepo}/k8s-ignition:${env.UNIQUE_VERSION}"
		env.IGNITION_TAG = ignitionTag


		stage 'Build Kubernetes (Hyperkube)'
		sh("git clone --depth 1 https://github.com/kubernetes/kubernetes.git -b master kubernetes")
		sh("cd kubernetes && git rev-parse --short HEAD > ../kubernetes_commit.txt")
		kubeCommit = readFile('kubernetes_commit.txt').trim()
		echo "Kubernetes Version: ${kubeCommit}"
		sh("""cd kubernetes \
			&& export KUBE_FASTBUILD=true \
			&& export KUBE_DOCKER_REGISTRY=docker.io \
			&& export KUBE_DOCKER_OWNER=colemickens \
			&& export KUBE_DOCKER_VERSION="${env.BUILD_NUMBER}-${kubeCommit}" \
			&& export HYPERKUBE_TAG="\${KUBE_DOCKER_REGISTRY}/\${KUBE_DOCKER_OWNER}/hyperkube-amd64:\${KUBE_DOCKER_VERSION}" \
			&& echo "\${KUBE_DOCKER_VERSION}" > ../hyperkube_version.txt \
			&& echo "\${HYPERKUBE_TAG}" > ../hyperkube_tag.txt \
			&& ./hack/dev-push-hyperkube.sh""")
		hyperkubeVersion = readFile('hyperkube_version.txt').trim()
		archiveArtifacts artifacts: 'kubernetes_commit.txt', fingerprint: true
		archiveArtifacts artifacts: 'hyperkube_version.txt', fingerprint: true
		archiveArtifacts artifacts: 'hyperkube_tag.txt', fingerprint: true


		stage 'Build Kubernetes Anywhere'
		def kanyImg = docker.build(kanyTag, '--pull .')
		kanyImg.push()
		sh("""echo "${kanyTag}" > kany_tag.txt""")
		archiveArtifacts artifacts: 'kany_tag.txt', fingerprint: true



		stage 'Build Ignition'
		dir('phase2/ignition') {
			def ignitionImg = docker.build(ignitionTag, '--pull .')
			ignitionImg.push()
			sh("""echo "${kanyTag}" > ignition_tag.txt""")
			archiveArtifacts artifacts: 'ignition_tag.txt', fingerprint: true
		}


		kanyImg.inside() {
			withCredentials([[
				$class: 'UsernamePasswordMultiBinding',
				credentialsId: 'azure_service_principal',
				usernameVariable: 'AZURE_CLIENT_ID',
				passwordVariable: 'AZURE_CLIENT_SECRET']]) {

				stage 'Deploy Cluster'
				sh("""set -x; \
				cat <<-EOF | make .config.json\n
						${clusterName}
						azure\n\n\n\n\n\n\n
						westus2\n
						${azureMachinePassword}
						${tenantId}
						${subscriptionId}
						${env.AZURE_CLIENT_ID}
						${env.AZURE_CLIENT_SECRET}
						${ignitionTag}
						${dockerRepo}
						${hyperkubeVersion}\n\n\n\n\n
				EOF""")

				sh('cp .config.json config.json')
				archiveArtifacts artifacts: 'config.json', fingerprint: true

				sh("make deploy")
				sh("cp ./phase1/azure/.tmp/kubeconfig.json ./kubeconfig.json")
				archiveArtifacts artifacts: 'kubeconfig.json', fingerprint: true

				if (testCluster=="y") {
					stage 'Test Cluster'
					withEnv(['KUBECONFIG=' + cwd() + '/phase1/azure/.tmp/kubeconfig.json']) {
						make conformtest
					}
				}

				if (destroyCluster=="y") {
					stage 'Destroy Cluster'
					withEnv(["FORCE_DESTROY=y"]) {
						sh("make destroy")
					}
				}
			}
		}
	}
}

def cwd() {
	sh 'pwd > pwd.current'
	return readFile('pwd.current').trim()
}
